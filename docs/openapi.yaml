openapi: 3.1.0
info:
  title: OpenAPI Specification
  version: 1.0.0
  description: "OpenAPI spec for network and email diagnostic tools, covering SMTP, DNS, authentication, and network diagnostics."
paths:
  /api/v1/smtp/connect/{host}:
    post:
      operationId: create_smtp_connection
      tags:
        - smtp
      summary: /api/v1/smtp/connect/{host}
      description: Establishes an SMTP connection to the specified host and port
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmtpConnectionDetails"
              examples:
                ExampleSuccess:
                  summary: Example of a successful SMTP connection
                  value:
                    host: "smtp.example.com"
                    port: "587"
                    connected: true
                    supports_start_tls: true
                    error: ""
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The host to connect to (e.g., domain.com or mail.domain.com).
          schema:
              $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
        - name: port
          in: query
          required: false
          description: The port number for the SMTP connection (e.g., "25", "587", "465"). Defaults to "25" if not provided.
          schema:
            $ref: "#/components/schemas/PortString"
          example: "25"
  /api/v1/smtp/starttls/{host}:
    post:
      operationId: create_start_tls_check
      tags:
        - smtp
      summary: /api/v1/smtp/starttls/{host}
      description: Checks STARTTLS support for a given host by connecting to its MX records.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StartTlsCheckResult"
              examples:
                ExampleSuccess:
                  summary: Example of a STARTTLS check result
                  value:
                    host: "example.com"
                    mx_records:
                      - "mx1.example.com"
                      - "mx2.example.com"
                    connection_status:
                      mx1_example_com: # Key matches an MX server identifier
                        host: "mx1.example.com"
                        port: "25"
                        connected: true
                        supports_start_tls: true
                        error: ""
                      mx2_example_com: # Key matches an MX server identifier
                        host: "mx2.example.com"
                        port: "25"
                        connected: true
                        supports_start_tls: false
                        error: "STARTTLS not supported"
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The host (domain) for which to check STARTTLS support on its MX records.
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
  /api/v1/auth/spf/{host}:
    post:
      operationId: create_spf_record_lookup
      tags:
        - auth
      summary: /api/v1/auth/spf/{host}
      description: Retrieves SPF (Sender Policy Framework) record for the given host.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SpfRecordDetails"
              examples:
                ExampleSuccess:
                  summary: Example of SPF record details
                  value:
                    domain: "example.com"
                    has_record: true
                    record: "v=spf1 mx a:mail.example.com ~all"
                    is_valid: true
                    mechanisms:
                      - "mx"
                      - "a:mail.example.com"
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The domain for which to retrieve the SPF record.
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
  /api/v1/auth/dmarc/{host}:
    post:
      operationId: create_dmarc_record_lookup
      tags:
        - auth
      summary: /api/v1/auth/dmarc/{host}
      description: Retrievesthe DMARC (Domain-based Message Authentication, Reporting & Conformance) record for the given host.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DmarcRecordDetails"
              examples:
                ExampleSuccess:
                  summary: Example of DMARC record details
                  value:
                    domain: "example.com"
                    has_record: true
                    record: "v=DMARC1; p=quarantine; rua=mailto:dmarc@example.com; pct=100"
                    is_valid: true
                    policy: "quarantine"
                    percentage: 100
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The domain for which to retrieve the DMARC record.
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
  /api/v1/dns/{host}:
    post:
      operationId: create_dns_records_lookup
      tags:
        - dns
      summary: /api/v1/dns/{host}
      description: Performs DNS lookups for various record types (A, AAAA, CNAME, MX, NS, SOA, TXT) for the specified host.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DnsRecordsCollection"
              examples:
                ExampleSuccess:
                  summary: Example of DNS records collection
                  value:
                    records:
                      A: ["192.0.2.1", "192.0.2.2"]
                      AAAA: ["2001:db8::1"]
                      CNAME: ["www.example.com.herokudns.com"]
                      MX: ["10 mail.example.com", "20 mail2.example.com"]
                      NS: ["ns1.example.com", "ns2.example.com"]
                      SOA: ["ns1.example.com. admin.example.com. 2023010101 7200 3600 1209600 3600"]
                      TXT: ["v=spf1 include:_spf.google.com ~all", "google-site-verification=abcdef12345"]
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The host (domain or subdomain) for which to perform DNS lookups.
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
  /api/v1/blacklist/{host}:
    post:
      operationId: create_blacklist_check
      tags:
        - blacklist
      summary: /api/v1/blacklist/{host}
      description: Checks if the IP address of the given host is listed on common DNS-based blacklists.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlacklistCheckResult"
              examples:
                ExampleSuccess:
                  summary: Example of a blacklist check result
                  value:
                    ip: "192.0.2.1"
                    listed_on:
                      "zen.spamhaus.org": false
                      "bl.spamcop.net": true
                    error: ""
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The host (domain or IP address) to check against DNS blacklists.
          schema:
            $ref: "#/components/schemas/HostOrIPAddressString"
          example: "example.com"
  /api/v1/network/ping/{host}:
    post:
      operationId: create_ping
      tags:
        - network
      summary: /api/v1/network/ping/{host}
      description: Pings the specified host to check network connectivity and measures round-trip times.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PingOperationResult"
              examples:
                ExampleSuccess:
                  summary: Example of a ping operation result
                  value:
                    tool: "system_ping"
                    target: "example.com"
                    ping_result:
                      target: "example.com"
                      resolved_ip: "192.0.2.1"
                      success: true
                      rtts: ["10.1ms", "10.5ms", "10.2ms", "10.3ms"]
                      avg_rtt: "10.275ms"
                      min_rtt: "10.1ms"
                      max_rtt: "10.5ms"
                      packets_sent: 4
                      packets_received: 4
                      packet_loss: 0
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The host (domain or IP address) to ping.
          schema:
            $ref: "#/components/schemas/HostOrIPAddressString"
          example: "example.com"
  /api/v1/network/traceroute/{host}:
    post:
      operationId: create_traceroute
      tags:
        - network
      summary: /api/v1/network/traceroute/{host}
      description: Traces the network path to the specified host, showing intermediate hops.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TracerouteOperationResult"
              examples:
                ExampleSuccess:
                  summary: Example of a traceroute operation result
                  value:
                    tool: "system_traceroute"
                    target: "example.com"
                    traceroute_result:
                      target: "example.com"
                      resolved_ip: "192.0.2.1"
                      hops:
                        - number: 1
                          ip: "192.168.1.1"
                          hostname: "router.local"
                          rtt: "1.2ms"
                        - number: 2
                          ip: "10.0.0.1"
                          hostname: "isp-gw.example.net"
                          rtt: "5.5ms"
                        - number: 3
                          ip: "192.0.2.1"
                          hostname: "example.com"
                          rtt: "10.1ms"
                      target_reached: true
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The host (domain or IP address) to trace the route to.
          schema:
            $ref: "#/components/schemas/HostOrIPAddressString"
          example: "example.com"
  /api/v1/network/whois/{host}:
    post:
      operationId: create_whois_lookup
      tags:
        - network
      summary: /api/v1/network/whois/{host}
      description: Retrieves WHOIS information for the specified domain, including registrar and registration dates.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WhoisOperationResult"
              examples:
                ExampleSuccess:
                  summary: Example of a WHOIS lookup result
                  value:
                    tool: "system_whois"
                    target: "example.com"
                    whois_result:
                      target: "example.com"
                      registrar: "Example Registrar Inc."
                      created_date: "2000-01-01T00:00:00Z"
                      expiration_date: "2025-01-01T00:00:00Z"
                      name_servers: ["ns1.exampleregistrar.com", "ns2.exampleregistrar.com"]
                      raw_data: "Domain Name: EXAMPLE.COM\nRegistrar: Example Registrar Inc.\n..."
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: "The host (domain name) for which to retrieve WHOIS information. Note: This path parameter is used as the primary target. The 'domain' query parameter can be used alternatively if needed, but the path parameter takes precedence."
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
        - name: domain
          in: query
          required: false
          description: "The domain name for which to retrieve WHOIS information. This is an alternative to the path parameter if a different target is needed for WHOIS specifically."
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.net"
  /api/v1/auth/dkim/{host}:
    post:
      operationId: create_dkim_records_lookup
      tags:
        - auth
      summary: /api/v1/auth/dkim/{host}
      description: Checks for DKIM (DomainKeys Identified Mail) records for the given host using common selectors (mail and google).
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DkimRecordsResult"
              examples:
                ExampleSuccess:
                  summary: Example of DKIM records check for common selectors
                  value:
                    domain: "example.com"
                    results:
                      - domain: "example.com"
                        selector: "google"
                        has_records: true
                        is_valid: true
                        error: ""
                      - domain: "example.com"
                        selector: "mail"
                        has_records: false
                        is_valid: false
                        error: "No DKIM record found"
                    is_valid: true
                    selectors: ["google", "mail"]
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The domain for which to check DKIM records using common selectors.
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
  /api/v1/auth/dkim/{host}/{selector}:
    post:
      operationId: create_dkim_record_lookup_by_selector
      tags:
        - auth
      summary: /api/v1/auth/dkim/{host}/{selector}
      description: Retrieves and validates the DKIM (DomainKeys Identified Mail) record for the given host and specific selector.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DkimRecordBySelectorResult"
              examples:
                ExampleSuccess:
                  summary: Example of DKIM record check for a specific selector
                  value:
                    domain: "example.com"
                    selector: "google"
                    has_records: true
                    records:
                      record_value: "v=DKIM1; k=rsa; p=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA..."
                    is_valid: true
          description: ""
          headers: {}
      security: []
      parameters:
        - name: host
          in: path
          required: true
          description: The domain for which to retrieve the DKIM record.
          schema:
            $ref: "#/components/schemas/DomainNameString"
          example: "example.com"
        - name: selector
          in: path
          required: true
          description: The specific DKIM selector to use for the lookup.
          schema:
            $ref: "#/components/schemas/DkimSelectorString"
          example: "google"
components:
  schemas:
    # Reusable String Pattern Schemas (New)
    DomainNameString:
      type: string
      description: "A string representing a valid domain name."
      pattern: "^([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}$"
      example: "example.com"
    PortString:
      type: string
      description: "A string representing a network port number."
      pattern: "^\\d+$"
      example: "443"
    ErrorString:
      type: string
      description: "A string containing an error message. Can be empty if no error."
      pattern: "^.*$"
      example: "Connection timed out." # Example if error, or "" if no error
    NonEmptyString:
      type: string
      description: "A non-empty string."
      pattern: "^.+$"
      example: "Some text value"
    IPv4String:
      type: string
      description: "A string representing a valid IPv4 address."
      pattern: "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$"
      example: "192.168.1.1"
    IPv6String:
      type: string
      description: "A string representing a valid IPv6 address."
      # Regex pattern for validating IPv6 addresses
      pattern: &IPv6Pattern >
        ^(
          ([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4} |  # 1:1:1:1:1:1:1:1
          ([0-9a-fA-F]{1,4}:){1,7}: |                # 1:: or 1:1:: (up to 7 colons)
          ([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4} |# 1::1 or 1:1::1 (up to 6 colons)
          ([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2} | # 1::1:1 or 1:1::1:1 (up to 5 colons)
          ([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3} | # 1::1:1:1 or 1:1::1:1:1 (up to 4 colons)
          ([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4} | # 1::1:1:1:1 or 1:1::1:1:1:1 (up to 3 colons)
          ([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5} | # 1::1:1:1:1:1 or 1:1::1:1:1:1:1 (up to 2 colons)
          [0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6}) |      # 1::1:1:1:1:1:1 or 1:1::1:1:1:1:1:1
          :((:[0-9a-fA-F]{1,4}){1,7}|:) |                    # ::1 or ::1:1:1:1:1:1:1
          fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,} |    # fe80::1%eth0 or fe80::1%1
          ::(ffff(:0{1,4}){0,1}:){0,1}
          ((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}
          (25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]) |         # ::255.255.255.255 or ::ffff:255.255.255.255
          ([0-9a-fA-F]{1,4}:){1,4}:
          ((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}
          (25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])          # 1:1:1:1:1:1:255.255.255.255
        )$
      example: "2001:0db8:85a3:0000:0000:8a2e:0370:7334"
    MxRecordValueString:
      type: string
      description: "A string representing an MX record value (priority and host)."
      pattern: "^\\d+ ([a-zA-Z0-9]([a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,6}$"
      example: "10 mx.example.com"
    DmarcPolicyString:
      type: string
      description: "A string representing a DMARC policy (none, quarantine, or reject)."
      pattern: "^(none|quarantine|reject)$"
      example: "quarantine"
    ToolNameString:
      type: string
      description: "A string representing the name of a tool, using alphanumeric characters and underscores."
      pattern: "^[a-zA-Z0-9_]+$"
      example: "system_ping"
    HostOrIPAddressString:
      type: string
      description: "A string representing a hostname, an IPv4 address, or an IPv6 address."
      pattern: ^(?:(?:([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\.)+([a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?))|((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])))$
      example: "example.com"
    RttString:
      type: string
      description: "A string representing a round-trip time value, ending with 'ms'."
      pattern: "^\\d+(\\.\\d+)?ms$"
      example: "10.5ms"
    TracerouteRttString:
      type: string
      description: "A string representing a round-trip time value for traceroute (can be '*' or value ending with 'ms')."
      pattern: "^(\\*|\\d+(\\.\\d+)?ms)$"
      example: "12.1ms"
    DateTimeUTCString:
      type: string
      description: "A string representing a date-time in ISO8601 UTC format (YYYY-MM-DDTHH:MM:SSZ)."
      pattern: "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}Z$"
      format: "date-time"
      example: "2023-01-01T12:00:00Z"
    DkimSelectorString:
      type: string
      description: "A string representing a DKIM selector (alphanumeric, dot, underscore, hyphen)."
      pattern: "^[a-zA-Z0-9._\\-]+$"
      example: "google"
    MultilineString:
      type: string
      description: "A string that can contain multiple lines of text and must be non-empty."
      pattern: "^(.|\\s)+$"
      example: "Line 1 of data\nLine 2 of data"

    # Existing Schemas (Modified)
    SmtpConnectionDetails:
      type: object
      description: Details of the SMTP connection attempt.
      properties:
        host:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The target host for the SMTP connection.
        port:
          allOf:
            - $ref: "#/components/schemas/PortString"
            - description: The port used for the SMTP connection (e.g., "25", "587").
        connected:
          type: boolean
          description: Indicates if the SMTP connection was successful.
        supports_start_tls:
          type: boolean
          description: Indicates if the SMTP server supports STARTTLS.
        error:
          allOf:
            - $ref: "#/components/schemas/ErrorString"
            - description: Error message if the connection failed or an issue occurred.
      required:
        - host
        - port
        - connected
        - supports_start_tls
        - error
    StartTlsCheckResult:
      type: object
      description: Results of STARTTLS check for the host's MX records.
      properties:
        host:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The target host for which STARTTLS support was checked.
        mx_records:
          type: array
          description: List of MX records found for the host (hostnames only).
          items:
            allOf:
              - $ref: "#/components/schemas/DomainNameString"
              - description: An MX record hostname.
        connection_status:
          type: object
          description: Connection status for each MX server. The keys are identifiers for the MX servers.
          additionalProperties:
            $ref: "#/components/schemas/MxServerStatus"
      required:
        - host
        - mx_records
        - connection_status
    MxServerStatus:
      type: object
      description: Connection and STARTTLS status for an individual MX server.
      properties:
        host:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The MX server hostname.
        port:
          allOf:
            - $ref: "#/components/schemas/PortString"
            - description: The port used to connect to the MX server (e.g., "25", "587").
        connected:
          type: boolean
          description: Indicates if connection to the MX server was successful.
        supports_start_tls:
          type: boolean
          description: Indicates if the MX server supports STARTTLS.
        error:
          allOf:
            - $ref: "#/components/schemas/ErrorString"
            - description: Error message if connection or STARTTLS check failed for this MX server.
      required:
        - host
        - port
        - connected
        - supports_start_tls
        - error
    SpfRecordDetails:
      type: object
      description: Details of the SPF record check.
      properties:
        domain:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The domain for which the SPF record was checked.
        has_record:
          type: boolean
          description: Indicates if an SPF record was found.
        record:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The raw SPF record string.
        is_valid:
          type: boolean
          description: Indicates if the SPF record is valid.
        mechanisms:
          type: array
          description: List of mechanisms found in the SPF record.
          items:
            allOf:
              - $ref: "#/components/schemas/NonEmptyString"
              - description: An SPF record mechanism.
      required:
        - domain
        - has_record
        - record
        - is_valid
        - mechanisms
    DmarcRecordDetails:
      type: object
      description: Details of the DMARC record check.
      properties:
        domain:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The domain for which the DMARC record was checked.
        has_record:
          type: boolean
          description: Indicates if a DMARC record was found.
        record:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The raw DMARC record string.
        is_valid:
          type: boolean
          description: Indicates if the DMARC record is valid.
        policy:
          allOf:
            - $ref: "#/components/schemas/DmarcPolicyString"
            - description: The DMARC policy (e.g., none, quarantine, reject).
        percentage:
          type: integer
          description: The percentage of messages to which the DMARC policy applies.
      required:
        - domain
        - has_record
        - record
        - is_valid
        - policy
        - percentage
    DnsRecordsCollection:
      type: object
      description: Collection of DNS records for the specified host.
      properties:
        records:
          $ref: "#/components/schemas/DnsRecordTypes" # Assuming DnsRecordTypes itself doesn't have siblings with $ref
      required:
        - records
    DnsRecordTypes:
      type: object
      description: DNS records categorized by type.
      properties:
        A:
          type: array
          description: List of A records.
          items:
            allOf:
              - $ref: "#/components/schemas/IPv4String"
              - description: An A record (IPv4 address).
        AAAA:
          type: array
          description: List of AAAA records.
          items:
            allOf:
              - $ref: "#/components/schemas/IPv6String"
              - description: An AAAA record (IPv6 address).
        CNAME:
          type: array
          description: List of CNAME records.
          items:
            allOf:
              - $ref: "#/components/schemas/DomainNameString"
              - description: A CNAME record (canonical name).
        MX:
          type: array
          description: List of MX records.
          items:
            allOf:
              - $ref: "#/components/schemas/MxRecordValueString"
              - description: An MX record (mail exchange).
        NS:
          type: array
          description: List of NS records.
          items:
            allOf:
              - $ref: "#/components/schemas/DomainNameString"
              - description: An NS record (name server).
        SOA:
          type: array
          description: List of SOA records.
          items:
            allOf:
              - $ref: "#/components/schemas/NonEmptyString"
              - description: An SOA record (start of authority).
        TXT:
          type: array
          description: List of TXT records.
          items:
            allOf:
              - $ref: "#/components/schemas/NonEmptyString"
              - description: A TXT record (text).
      required:
        - A
        - AAAA
        - CNAME
        - MX
        - NS
        - SOA
        - TXT
    BlacklistCheckResult:
      type: object
      description: Blacklist check results for the host's IP address.
      properties:
        ip:
          allOf:
            - $ref: "#/components/schemas/IPv4String"
            - description: The IP address that was checked against blacklists.
        listed_on:
          type: object
          description: An object where keys are blacklist names and values indicate if listed.
          additionalProperties:
            type: boolean
        error:
          allOf:
            - $ref: "#/components/schemas/ErrorString"
            - description: Error message if the blacklist check failed.
      required:
        - ip
        - listed_on
        - error
    PingOperationResult:
      type: object
      description: Results of the ping operation.
      properties:
        tool:
          allOf:
            - $ref: "#/components/schemas/ToolNameString"
            - description: Name of the tool used for pinging.
        target:
          allOf:
            - $ref: "#/components/schemas/HostOrIPAddressString"
            - description: The target host that was pinged.
        ping_result:
          $ref: "#/components/schemas/PingResultDetails"
      required:
        - tool
        - target
        - ping_result
    PingResultDetails:
      type: object
      description: Detailed results of the ping.
      properties:
        target:
          allOf:
            - $ref: "#/components/schemas/HostOrIPAddressString"
            - description: The target host of the ping.
        resolved_ip:
          allOf:
            - $ref: "#/components/schemas/IPv4String"
            - description: The resolved IP address of the target.
        success:
          type: boolean
          description: Indicates if the ping was successful.
        rtts:
          type: array
          description: List of round-trip times for each packet.
          items:
            allOf:
              - $ref: "#/components/schemas/RttString"
              - description: Round-trip time for a packet.
        avg_rtt:
          allOf:
            - $ref: "#/components/schemas/RttString"
            - description: Average round-trip time.
        min_rtt:
          allOf:
            - $ref: "#/components/schemas/RttString"
            - description: Minimum round-trip time.
        max_rtt:
          allOf:
            - $ref: "#/components/schemas/RttString"
            - description: Maximum round-trip time.
        packets_sent:
          type: integer
          description: Number of packets sent.
        packets_received:
          type: integer
          description: Number of packets received.
        packet_loss:
          type: integer
          description: Percentage of packet loss.
      required:
        - target
        - resolved_ip
        - success
        - rtts
        - avg_rtt
        - min_rtt
        - max_rtt
        - packets_sent
        - packets_received
        - packet_loss
    TracerouteOperationResult:
      type: object
      description: Results of the traceroute operation.
      properties:
        tool:
          allOf:
            - $ref: "#/components/schemas/ToolNameString"
            - description: Name of the tool used for traceroute.
        target:
          allOf:
            - $ref: "#/components/schemas/HostOrIPAddressString"
            - description: The target host for the traceroute.
        traceroute_result:
          $ref: "#/components/schemas/TracerouteResultDetails"
      required:
        - tool
        - target
        - traceroute_result
    TracerouteResultDetails:
      type: object
      description: Detailed results of the traceroute.
      properties:
        target:
          allOf:
            - $ref: "#/components/schemas/HostOrIPAddressString"
            - description: The target host of the traceroute.
        resolved_ip:
          allOf:
            - $ref: "#/components/schemas/IPv4String" # Assuming IPv4 based on original pattern. Could be HostOrIPAddressString if IPv6 is possible.
            - description: The resolved IP address of the target.
        hops:
          type: array
          description: List of hops in the traceroute path.
          items:
            $ref: "#/components/schemas/TracerouteHop"
        target_reached:
          type: boolean
          description: Indicates if the target was reached.
      required:
        - target
        - resolved_ip
        - hops
        - target_reached
    TracerouteHop:
      type: object
      description: Details of a single hop in the traceroute.
      properties:
        number:
          type: integer
          description: Hop number.
        ip:
          allOf:
            - $ref: "#/components/schemas/IPv4String" # Assuming IPv4 based on original pattern. Could be HostOrIPAddressString if IPv6 is possible.
            - description: IP address of the hop.
        hostname:
          allOf:
            - $ref: "#/components/schemas/DomainNameString" # Or HostOrIPAddressString if IP can appear here
            - description: Hostname of the hop (if resolved).
        rtt:
          allOf:
            - $ref: "#/components/schemas/TracerouteRttString"
            - description: Round-trip time to the hop.
      required:
        - number
        - ip
        - hostname
        - rtt
    WhoisOperationResult:
      type: object
      description: Results of the WHOIS lookup.
      properties:
        tool:
          allOf:
            - $ref: "#/components/schemas/ToolNameString"
            - description: Name of the tool used for WHOIS lookup.
        target:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The target domain for the WHOIS lookup.
        whois_result:
          $ref: "#/components/schemas/WhoisResultDetails"
      required:
        - tool
        - target
        - whois_result
    WhoisResultDetails:
      type: object
      description: Detailed WHOIS information.
      properties:
        target:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The target domain of the WHOIS lookup.
        registrar:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: Registrar of the domain.
        created_date:
          allOf:
            - $ref: "#/components/schemas/DateTimeUTCString"
            - description: Creation date of the domain registration.
        expiration_date:
          allOf:
            - $ref: "#/components/schemas/DateTimeUTCString"
            - description: Expiration date of the domain registration.
        name_servers:
          type: array
          description: List of name servers for the domain.
          items:
            allOf:
              - $ref: "#/components/schemas/DomainNameString"
              - description: A name server.
        raw_data:
          allOf:
            - $ref: "#/components/schemas/MultilineString"
            - description: Raw WHOIS data.
      required:
        - target
        - registrar
        - created_date
        - expiration_date
        - name_servers
        - raw_data
    DkimRecordsResult:
      type: object
      description: Results of DKIM record checks for common selectors.
      properties:
        domain:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The domain for which DKIM records were checked.
        results:
          type: array
          description: List of DKIM check results for each selector.
          items:
            $ref: "#/components/schemas/DkimSelectorResult"
        is_valid:
          type: boolean
          description: Overall DKIM validity status (e.g., if at least one selector is valid).
        selectors:
          type: array
          description: List of selectors that were checked.
          items:
            allOf:
              - $ref: "#/components/schemas/DkimSelectorString"
              - description: A DKIM selector.
      required:
        - domain
        - results
        - is_valid
        - selectors
    DkimSelectorResult:
      type: object
      description: DKIM check result for a specific selector.
      properties:
        domain:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The domain checked.
        selector:
          allOf:
            - $ref: "#/components/schemas/DkimSelectorString"
            - description: The DKIM selector used.
        has_records:
          type: boolean
          description: Indicates if DKIM records were found for this selector.
        is_valid:
          type: boolean
          description: Indicates if the found DKIM records are valid.
        error:
          allOf:
            - $ref: "#/components/schemas/ErrorString"
            - description: Error message if the check failed for this selector.
      required:
        - domain
        - selector
        - has_records
        - is_valid
        - error
    DkimRecordBySelectorResult:
      type: object
      description: Details of the DKIM record check for a specific selector.
      properties:
        domain:
          allOf:
            - $ref: "#/components/schemas/DomainNameString"
            - description: The domain for which the DKIM record was checked.
        selector:
          allOf:
            - $ref: "#/components/schemas/DkimSelectorString"
            - description: The specific DKIM selector used.
        has_records:
          type: boolean
          description: Indicates if DKIM records were found for this selector.
        records:
          $ref: "#/components/schemas/DkimRecordValue"
        is_valid:
          type: boolean
          description: Indicates if the found DKIM record is valid.
      required:
        - domain
        - selector
        - has_records
        - records
        - is_valid
    DkimRecordValue:
      type: object
      description: The DKIM record(s) found. Structure may vary.
      properties:
        record_value:
          allOf:
            - $ref: "#/components/schemas/NonEmptyString"
            - description: The value of the DKIM record.
      # 'required' for this sub-object would depend on actual known structure
      # For now, let's assume no specific sub-properties are always required
      # required:
      #   - record_value
